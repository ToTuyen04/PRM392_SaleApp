package com.salesapp.service;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Map;
import java.util.List;

@Service
@RequiredArgsConstructor
public class AITrainingService {

    private final RestTemplate restTemplate = new RestTemplate();
    private final EnhancedGeminiService enhancedGeminiService;

    private static final String SWAGGER_API_DOCS_URL = "https://saleapp-mspd.onrender.com/v3/api-docs";

    /**
     * Fetch API documentation from Swagger and generate training data
     */
    @SuppressWarnings("unchecked")
    public String fetchAndGenerateTrainingData() {
        try {
            // Fetch API documentation from Swagger
            ResponseEntity<Map<String, Object>> response = restTemplate.getForEntity(SWAGGER_API_DOCS_URL, (Class<Map<String, Object>>) (Class<?>) Map.class);
            Map<String, Object> apiDocs = response.getBody();

            if (apiDocs == null) {
                return "Cannot fetch API documentation";
            }

            return generateComprehensiveTrainingData(apiDocs);

        } catch (Exception e) {
            e.printStackTrace();
            return "Error fetching API documentation: " + e.getMessage();
        }
    }

    /**
     * Generate comprehensive training data based on API documentation
     */
    @SuppressWarnings("unchecked")
    private String generateComprehensiveTrainingData(Map<String, Object> apiDocs) {
        StringBuilder trainingData = new StringBuilder();
        
        trainingData.append("ü§ñ FKITSHOP AI COMPREHENSIVE TRAINING DATA\n");
        trainingData.append("=========================================\n\n");

        // Extract API paths and generate training examples
        Map<String, Object> paths = (Map<String, Object>) apiDocs.get("paths");
        if (paths != null) {
            trainingData.append("üìã API ENDPOINTS KNOWLEDGE:\n\n");
            
            for (String path : paths.keySet()) {
                Map<String, Object> pathInfo = (Map<String, Object>) paths.get(path);
                trainingData.append(generatePathTrainingData(path, pathInfo));
            }
        }

        // Add business logic training data
        trainingData.append(generateBusinessLogicTrainingData());
        
        // Add common Q&A scenarios
        trainingData.append(generateCommonQAScenarios());

        return trainingData.toString();
    }

    @SuppressWarnings("unchecked")
    private String generatePathTrainingData(String path, Map<String, Object> pathInfo) {
        StringBuilder pathTraining = new StringBuilder();
        
        pathTraining.append("üîó ").append(path).append("\n");
        
        for (String method : pathInfo.keySet()) {
            Map<String, Object> methodInfo = (Map<String, Object>) pathInfo.get(method);
            String summary = (String) methodInfo.get("summary");
            String description = (String) methodInfo.get("description");
            
            pathTraining.append("   ").append(method.toUpperCase()).append(": ");
            pathTraining.append(summary != null ? summary : "No description");
            if (description != null) {
                pathTraining.append(" - ").append(description);
            }
            pathTraining.append("\n");
        }
        pathTraining.append("\n");
        
        return pathTraining.toString();
    }

    private String generateBusinessLogicTrainingData() {
        return """
                
                üíº BUSINESS LOGIC TRAINING:
                ===========================
                
                üîê AUTHENTICATION FLOW:
                Q: Quy tr√¨nh ƒëƒÉng nh·∫≠p nh∆∞ th·∫ø n√†o?
                A: 1. POST /v1/auth/login v·ªõi username/password ‚Üí Nh·∫≠n JWT token
                   2. S·ª≠ d·ª•ng token trong header Authorization: Bearer <token>
                   3. Token c√≥ th·ªÉ refresh qua POST /v1/auth/refresh
                   4. ƒêƒÉng xu·∫•t qua POST /v1/auth/logout
                
                üõí SHOPPING FLOW:
                Q: Quy tr√¨nh mua h√†ng ho√†n ch·ªânh?
                A: 1. ƒêƒÉng k√Ω/ƒêƒÉng nh·∫≠p ‚Üí 2. Duy·ªát s·∫£n ph·∫©m (GET /v1/products)
                   3. Th√™m v√†o gi·ªè (POST /v1/carts/items) ‚Üí 4. ƒê·∫∑t h√†ng (POST /v1/orders)
                   5. Thanh to√°n VNPay/COD ‚Üí 6. Theo d√µi ƒë∆°n h√†ng (GET /v1/orders)
                
                üí≥ PAYMENT SYSTEM:
                Q: H·ªá th·ªëng thanh to√°n ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?
                A: - VNPay: T·∫°o payment URL ‚Üí Redirect ‚Üí Callback x·ª≠ l√Ω k·∫øt qu·∫£
                   - COD: ƒê·∫∑t h√†ng v·ªõi status Pending ‚Üí Thanh to√°n khi nh·∫≠n h√†ng
                   - Payment status: Pending ‚Üí Paid/Cancelled
                
                üì¶ ORDER MANAGEMENT:
                Q: C√°c tr·∫°ng th√°i ƒë∆°n h√†ng?
                A: Pending (ch·ªù x·ª≠ l√Ω) ‚Üí Processing (ƒëang x·ª≠ l√Ω) ‚Üí Shipped (ƒë√£ g·ª≠i) 
                   ‚Üí Delivered (ƒë√£ giao) ho·∫∑c Cancelled (ƒë√£ h·ªßy)
                
                üè∑Ô∏è PRODUCT MANAGEMENT:
                Q: C√°ch t√¨m ki·∫øm v√† l·ªçc s·∫£n ph·∫©m?
                A: - GET /v1/products?keyword=... (t√¨m ki·∫øm)
                   - GET /v1/products?categoryId=... (l·ªçc theo danh m·ª•c)
                   - H·ªó tr·ª£ pagination v·ªõi page v√† size
                
                """;
    }

    private String generateCommonQAScenarios() {
        return """
                
                ‚ùì COMMON Q&A SCENARIOS:
                ========================
                
                Q: T√¥i qu√™n m·∫≠t kh·∫©u, l√†m sao l·∫•y l·∫°i?
                A: Hi·ªán t·∫°i h·ªá th·ªëng ch∆∞a c√≥ t√≠nh nƒÉng reset password t·ª± ƒë·ªông. T√¥i s·∫Ω chuy·ªÉn c√¢u h·ªèi c·ªßa b·∫°n ƒë·∫øn nh√¢n vi√™n h·ªó tr·ª£ ngay b√¢y gi·ªù.
                
                Q: L√†m sao c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n?
                A: V√†o m·ª•c Profile, ch·ªânh s·ª≠a th√¥ng tin v√† l∆∞u. API s·ª≠ d·ª•ng: PUT /v1/users/{id}
                
                Q: T√¥i mu·ªën h·ªßy ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t?
                A: N·∫øu ƒë∆°n h√†ng c√≤n ·ªü tr·∫°ng th√°i Pending/Processing, b·∫°n c√≥ th·ªÉ h·ªßy qua API PUT /v1/orders/{id}/cancel. N·∫øu ƒë√£ Shipped th√¨ c·∫ßn li√™n h·ªá admin.
                
                Q: S·∫£n ph·∫©m c√≥ b·∫£o h√†nh kh√¥ng?
                A: Th√¥ng tin b·∫£o h√†nh ƒë∆∞·ª£c ghi trong m√¥ t·∫£ s·∫£n ph·∫©m. M·ªói s·∫£n ph·∫©m c√≥ ch√≠nh s√°ch b·∫£o h√†nh kh√°c nhau.
                
                Q: Ph√≠ v·∫≠n chuy·ªÉn nh∆∞ th·∫ø n√†o?
                A: Ph√≠ v·∫≠n chuy·ªÉn ph·ª• thu·ªôc v√†o ƒë·ªãa ch·ªâ giao h√†ng v√† ƒë∆∞·ª£c t√≠nh trong t·ªïng ti·ªÅn ƒë∆°n h√†ng.
                
                Q: C√≥ th·ªÉ ƒë·ªïi tr·∫£ h√†ng kh√¥ng?
                A: Ch√≠nh s√°ch ƒë·ªïi tr·∫£ theo quy ƒë·ªãnh c·ªßa shop. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ bi·∫øt chi ti·∫øt c·ª• th·ªÉ.
                
                Q: App c√≥ h·ªó tr·ª£ notification kh√¥ng?
                A: C√≥, app ShopMate c√≥ h·ªá th·ªëng notification real-time qua WebSocket ƒë·ªÉ th√¥ng b√°o v·ªÅ ƒë∆°n h√†ng v√† tin nh·∫Øn.
                
                Q: L√†m sao li√™n h·ªá v·ªõi admin?
                A: B·∫°n c√≥ th·ªÉ chat tr·ª±c ti·∫øp trong app, ch·ªçn "Chat v·ªõi Admin" ho·∫∑c t√¥i c√≥ th·ªÉ chuy·ªÉn c√¢u h·ªèi cho admin ngay.
                
                Q: API c√≥ rate limiting kh√¥ng?
                A: H·ªá th·ªëng c√≥ gi·ªõi h·∫°n request ƒë·ªÉ b·∫£o v·ªá server. N·∫øu g·∫∑p l·ªói 429, vui l√≤ng ch·ªù m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i.
                
                Q: D·ªØ li·ªáu c√≥ ƒë∆∞·ª£c b·∫£o m·∫≠t kh√¥ng?
                A: T·∫•t c·∫£ API ƒë·ªÅu s·ª≠ d·ª•ng HTTPS v√† JWT authentication. Th√¥ng tin c√° nh√¢n ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o v·ªá theo ti√™u chu·∫©n b·∫£o m·∫≠t.
                
                """;
    }

    /**
     * Test the AI with sample questions to validate training
     */
    public String testAIKnowledge() {
        List<String> testQuestions = List.of(
            "L√†m sao ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n?",
            "C√≥ nh·ªØng ph∆∞∆°ng th·ª©c thanh to√°n n√†o?",
            "L√†m sao theo d√µi ƒë∆°n h√†ng?",
            "T√¥i mu·ªën t√¨m s·∫£n ph·∫©m theo danh m·ª•c?",
            "API authentication ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?"
        );

        StringBuilder testResults = new StringBuilder();
        testResults.append("üß™ AI KNOWLEDGE TEST RESULTS:\n");
        testResults.append("==============================\n\n");

        for (String question : testQuestions) {
            testResults.append("Q: ").append(question).append("\n");
            try {
                var response = enhancedGeminiService.getEnhancedResponseFromAI(question, "Testing AI knowledge");
                testResults.append("A: ").append(response.getReply()).append("\n");
                testResults.append("Need Human: ").append(response.isNeedHuman()).append("\n\n");
            } catch (Exception e) {
                testResults.append("A: Error testing - ").append(e.getMessage()).append("\n\n");
            }
        }

        return testResults.toString();
    }

    /**
     * Get API documentation summary for training
     */
    public String getAPIDocumentationSummary() {
        return """
                üìñ FKITSHOP API DOCUMENTATION SUMMARY:
                =====================================
                
                Base URL: https://saleapp-mspd.onrender.com
                Swagger UI: https://saleapp-mspd.onrender.com/swagger-ui/index.html
                
                üîë AUTHENTICATION:
                - All protected endpoints require JWT token
                - Header: Authorization: Bearer <token>
                - Login: POST /v1/auth/login
                - Register: POST /v1/auth/register
                
                üì¶ MAIN ENDPOINTS:
                - Products: /v1/products/**
                - Categories: /v1/categories/**
                - Cart: /v1/carts/**
                - Orders: /v1/orders/**
                - Payments: /v1/payments/**
                - Users: /v1/users/**
                - VNPay: /v1/vnpay/**
                - Chat: /v1/chat/**
                - Store Locations: /v1/store-locations/**
                
                üì± MOBILE INTEGRATION:
                - Android app "ShopMate"
                - Real-time WebSocket chat
                - VNPay payment gateway
                - JWT authentication
                
                This comprehensive API knowledge enables the AI to provide accurate,
                helpful assistance to customers using the FKitShop platform.
                """;
    }
}
